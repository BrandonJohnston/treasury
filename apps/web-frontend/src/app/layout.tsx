import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

import { auth0 } from "@/lib/auth0";

import { SidebarProvider } from "@/components/ui/sidebar";
import { AppSidebar } from "@/components/app-sidebar/AppSidebar";
import Header from "@/components/header/Header";

interface IUserPayload {
	email?: string;
	name?: string;
	provider: string;
	provider_id: string;
}

const geistSans = Geist({
	variable: "--font-geist-sans",
	subsets: ["latin"],
});

const geistMono = Geist_Mono({
	variable: "--font-geist-mono",
	subsets: ["latin"],
});

export const metadata: Metadata = {
	title: "Create Next App",
	description: "Generated by create next app",
};

export default async function RootLayout({
	children,
}: Readonly<{
	children: React.ReactNode;
}>) {
	const accessToken = await auth0.getAccessToken();
	const session = await auth0.getSession();

	if (session?.user) {
		try {
			const provider = session.user.sub.split("|");
			const payload: IUserPayload = {
				email: session.user.email,
				name: session.user.name,
				provider: provider[0],
				provider_id: provider[1],
			};

			const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/user`, {
				method: 'POST',
				headers: {
					'Authorization': `Bearer ${accessToken}`,
					'Content-Type': 'application/json',
				},
				body: JSON.stringify(payload),
			});
			console.log("response: ", response);
			const user = await response.json();
			console.log("user: ", user);
		} catch (error) {
			console.error("Error: ", error);
		}
	}

	return (
		<html lang="en">
			<body
				className={`${geistSans.variable} ${geistMono.variable} antialiased relative h-screen`}
			>
				<SidebarProvider>
					<Header />
					{session && <AppSidebar />}
					<main className="w-full pt-[60px]">
						{children}
					</main>
				</SidebarProvider>
			</body>
		</html>
	);
}
